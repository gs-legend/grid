import { BeanStub, Column, ColumnVO, IServerSideDatasource, IServerSideRowModel, IServerSideStore, NumberSequence, RowBounds, RowNode, StoreRefreshAfterParams, RefreshStoreParams, ServerSideStoreState, SortModelItem } from "@ag-grid-community/core";
export interface SSRMParams {
    sortModel: SortModelItem[];
    filterModel: any;
    lastAccessedSequence: NumberSequence;
    dynamicRowHeight: boolean;
    rowGroupCols: ColumnVO[];
    valueCols: ColumnVO[];
    pivotCols: ColumnVO[];
    pivotMode: boolean;
    datasource?: IServerSideDatasource;
}
export declare class ServerSideRowModel extends BeanStub implements IServerSideRowModel {
    private columnModel;
    private filterManager;
    private sortController;
    private gridApi;
    private columnApi;
    private rowRenderer;
    private sortListener;
    private nodeManager;
    private storeFactory;
    private beans;
    private rootNode;
    private datasource;
    private storeParams;
    private pauseStoreUpdateListening;
    private started;
    ensureRowHeightsValid(): boolean;
    start(): void;
    private destroyDatasource;
    private addEventListeners;
    private verifyProps;
    setDatasource(datasource: IServerSideDatasource): void;
    isLastRowIndexKnown(): boolean;
    private onColumnEverything;
    private destroyRootStore;
    refreshAfterSort(newSortModel: SortModelItem[], params: StoreRefreshAfterParams): void;
    resetRootStore(): void;
    columnsToValueObjects(columns: Column[]): ColumnVO[];
    private createStoreParams;
    getParams(): SSRMParams;
    private dispatchModelUpdated;
    private onStoreUpdated;
    onRowHeightChanged(): void;
    updateRowIndexesAndBounds(): void;
    retryLoads(): void;
    getRow(index: number): RowNode | undefined;
    expandAll(value: boolean): void;
    refreshAfterFilter(newFilterModel: any, params: StoreRefreshAfterParams): void;
    getRootStore(): IServerSideStore | undefined;
    getRowCount(): number;
    getTopLevelRowCount(): number;
    getTopLevelRowDisplayedIndex(topLevelIndex: number): number;
    getRowBounds(index: number): RowBounds;
    getRowIndexAtPixel(pixel: number): number;
    isEmpty(): boolean;
    isRowsToRender(): boolean;
    getType(): string;
    forEachNode(callback: (rowNode: RowNode, index: number) => void): void;
    forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void): void;
    executeOnStore(route: string[], callback: (cache: IServerSideStore) => void): void;
    refreshStore(params?: RefreshStoreParams): void;
    getStoreState(): ServerSideStoreState[];
    getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
    getRowNode(id: string): RowNode | undefined;
    isRowPresent(rowNode: RowNode): boolean;
}
